{"version":3,"sources":["components/logo.png","components/Header.js","components/ProjectItem.js","project-logic/project.js","project-logic/task.js","backend/firestore.js","project-logic/projectmanager.js","components/AddNewProjectOverlay.js","components/NavigationMenu.js","components/AddNewTaskOverlay.js","components/EditTaskOverlay.js","components/TaskItem.js","components/ProjectOverview.js","components/Main.js","App.js","backend/firebase-config.js","index.js"],"names":["Header","props","src","logo","className","alt","ProjectItem","project","handleChangeProject","onClick","bind","this","name","projectFactory","uid","tasks","id","uniqid","findTaskByID","find","task","getID","addTask","push","updateTasksInProjectInFirestore","removeTaskByIndex","index","removedTask","splice","removeTaskByID","filter","sortByPriority","sort","taskA","taskB","priority","clearTasks","getTasks","setTasks","newTasks","toggleCompleteTaskByID","complete","uncomplete","clearCompletedTasks","isComplete","editTaskWithNewTaskInfo","newTask","editedTask","title","description","dueDate","taskFactory","completed","a","db","getFirestore","setDoc","doc","projectName","timestamp","serverTimestamp","merge","console","error","projectID","projectDocRef","updateDoc","map","taskToDocObject","docToProject","data","docObject","docObjectToTask","generatedProject","getDocs","collection","forEach","projectManager","addProjectAtIndex","addProject","projects","addNewProjectToFirestore","deleteProjectByIndex","removedProject","deleteProjectbyID","findProjectByID","getProjects","findProjectByName","setProjects","newProjects","AddNewProjectOverlay","handleAddNewProject","handleExit","useState","isActive","setIsActive","value","setValue","class","type","onChange","e","text","target","htmlFor","style","display","justifyContent","NavigationMenu","addProjectWindowVisible","setAddProjectWindowVisible","useEffect","in","timeout","classNames","unmountOnExit","Object","assign","AddNewTaskOverlay","handleAddTask","isActiveList","setIsActiveList","values","setValues","handleTextChange","newValues","newIsActiveList","EditTaskOverlay","handleEditTask","TaskItem","handleDeleteTask","handleCompleteTask","showEditTaskWindow","setShowEditTaskWindow","toggleShowEditTaskWindow","checked","ProjectOverview","handleClearCompleted","addNewVisible","setAddNewVisible","toggleAddNewVisible","Main","selectedProject","setSelectedProject","newProject","newSelectedProject","App","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","Error","getFirebaseConfig","matchProjectManagerToFirestore","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16a77749.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c81ad55b.png\";","import React, { Component } from 'react';\r\nimport '../master.css';\r\nimport './header.css';\r\nimport logo from './logo.png';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header>\r\n            <img src={logo} className='logo' alt='Website logo'/>\r\n            <h1>Project Task Manager</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction ProjectItem(props) {\r\n    const {project, handleChangeProject} = props;\r\n\r\n    return (\r\n        <button className=\"project-button\"\r\n        onClick={handleChangeProject.bind(this, project)}>{project.name}</button>\r\n    );\r\n}\r\n\r\nexport default ProjectItem;","import uniqid from 'uniqid';\r\nimport { updateTasksInProjectInFirestore } from '../backend/firestore';\r\n\r\nconst projectFactory = (name, uid) => {\r\n    let tasks = [];\r\n    let id = (uid) ? uid : uniqid();\r\n    \r\n    const addTask = (task) => {\r\n        tasks.push(task);\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n        return task;\r\n    }\r\n    const removeTaskByIndex = (index) => {\r\n        const removedTask = tasks[index];\r\n        tasks.splice(index, 1);\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n        return removedTask;\r\n    }\r\n    const removeTaskByID = (id) => {\r\n        tasks = tasks.filter(task => task.getID() !== id);\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n    }\r\n    const sortByPriority = ()=>{\r\n        tasks.sort((taskA, taskB)=>taskA.priority-taskB.priority);\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n    }\r\n    const clearTasks = () => {\r\n        tasks = [];\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n    }\r\n    const getTasks = () => {\r\n        return tasks;\r\n    }\r\n    const setTasks = (newTasks) => {\r\n        tasks = newTasks;\r\n    }\r\n    const findTaskByID = (id) => {\r\n        return tasks.find(task => task.getID() === id);\r\n    }\r\n    const toggleCompleteTaskByID = (id, complete) => {\r\n        let task = findTaskByID(id);\r\n        if (complete)\r\n            task.complete();\r\n        else\r\n            task.uncomplete();\r\n        updateTasksInProjectInFirestore(uid, tasks);\r\n    }\r\n    const getID = () => {\r\n        return id;\r\n    }\r\n    const clearCompletedTasks = () => {\r\n        tasks = tasks.filter(task => !task.isComplete());\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n    }\r\n    const editTaskWithNewTaskInfo = (id, newTask) => {\r\n        let editedTask = findTaskByID(id);\r\n        editedTask.title = newTask.title;\r\n        editedTask.description = newTask.description;\r\n        editedTask.dueDate = newTask.dueDate;\r\n        editedTask.priority = newTask.priority;\r\n        updateTasksInProjectInFirestore(uid,tasks);\r\n    }\r\n\r\n    return {\r\n        name,\r\n        addTask,\r\n        removeTaskByIndex,\r\n        removeTaskByID,\r\n        sortByPriority,\r\n        findTaskByID,\r\n        clearTasks,\r\n        getTasks,\r\n        setTasks,\r\n        toggleCompleteTaskByID,\r\n        getID,\r\n        clearCompletedTasks,\r\n        editTaskWithNewTaskInfo\r\n    }\r\n}\r\nexport default projectFactory;","import uniqid from 'uniqid';\r\n\r\nconst taskFactory = (title, description, dueDate, priority, uid) => {\r\n    /* Priority key:\r\n        1 = High\r\n        2 = Medium\r\n        3 = Low\r\n    */\r\n    let completed = false;\r\n    let id = (uid) ? uid : uniqid();\r\n\r\n    const complete = ()=>{\r\n        completed = true;\r\n    }\r\n    const uncomplete = ()=>{\r\n        completed = false;\r\n    }\r\n    const isComplete = ()=>{\r\n        return completed;\r\n    }\r\n\r\n    const getID = ()=>{\r\n        return id;\r\n    }\r\n\r\n    return {title, \r\n        isComplete,\r\n        description, \r\n        dueDate, \r\n        priority,\r\n        complete,\r\n        uncomplete,\r\n        getID,\r\n        id};\r\n};\r\n\r\nexport default taskFactory;","import { getByDisplayValue, getDefaultNormalizer } from '@testing-library/react';\r\nimport {\r\n    getFirestore,\r\n    collection,\r\n    addDoc,\r\n    query,\r\n    orderBy,\r\n    limit,\r\n    onSnapshot,\r\n    getDocs,\r\n    setDoc,\r\n    updateDoc,\r\n    doc,\r\n    serverTimestamp,\r\n  } from 'firebase/firestore';\r\nimport projectFactory from '../project-logic/project';\r\nimport projectManager from '../project-logic/projectmanager';\r\nimport taskFactory from '../project-logic/task';\r\n\r\nasync function addNewProjectToFirestore(project) {\r\n    let db = getFirestore();\r\n    try {\r\n        await setDoc(doc(db, \"projects\", project.getID()), {\r\n            projectName: project.name,\r\n            tasks: project.getTasks(),\r\n            timestamp: serverTimestamp()\r\n        }, { merge: true });\r\n    }\r\n    catch(error) {\r\n        console.error('Unable to add new project to Firestore', error)\r\n    }\r\n}\r\n\r\nasync function updateTasksInProjectInFirestore(projectID, tasks) {\r\n    let db = getFirestore();\r\n    let projectDocRef = doc(db, 'projects', projectID);\r\n    await updateDoc(projectDocRef, {\r\n        tasks: tasks.map(taskToDocObject)\r\n    });\r\n    \r\n    //await projectDoc\r\n}\r\n\r\nfunction taskToDocObject(task) {\r\n    return {\r\n        title: task.title,\r\n        description: task.description,\r\n        dueDate: task.dueDate,\r\n        priority: task.priority,\r\n        id: task.getID(),\r\n        complete: task.isComplete()\r\n    }\r\n}\r\n\r\nfunction docObjectToTask(docObject) {\r\n    let title = docObject.title;\r\n    let description = docObject.description;\r\n    let dueDate = docObject.dueDate;\r\n    let priority = docObject.priority;\r\n    let id = docObject.id;\r\n    let complete = docObject.complete;\r\n    \r\n    let newTask = taskFactory(title, description, dueDate, priority, id);\r\n    complete && newTask.complete();\r\n\r\n    return newTask;\r\n}\r\n\r\nfunction docToProject(doc) {\r\n    let data = doc.data();\r\n    let projectID = doc.id;\r\n    let projectName = data.projectName;\r\n    let tasks = data.tasks;\r\n    tasks = tasks.map((task) => {\r\n        return docObjectToTask(task);\r\n    });\r\n    let generatedProject = projectFactory(projectName, projectID);\r\n    generatedProject.setTasks(tasks);\r\n    return generatedProject;\r\n}\r\n\r\nasync function matchProjectManagerToFirestore() {\r\n    let db = getFirestore();\r\n\r\n    const querySnapshot = await getDocs(collection(db, \"projects\"));\r\n    querySnapshot.forEach((doc) => {\r\n        let generatedProject = docToProject(doc);\r\n        if (generatedProject.getID() === '~') {\r\n            projectManager.addProjectAtIndex(0, generatedProject);\r\n        } else {\r\n            projectManager.addProject(generatedProject);\r\n        }\r\n    });\r\n}\r\n\r\nexport {addNewProjectToFirestore, updateTasksInProjectInFirestore, matchProjectManagerToFirestore};","import { addNewProjectToFirestore, getInboxProject } from \"../backend/firestore\";\r\nimport projectFactory from \"./project\";\r\nimport taskFactory from \"./task\";\r\n\r\nconst projectManager = (()=>{\r\n    let projects = [];\r\n    //projects.push(getInboxProject(inbox));\r\n\r\n    const addProject = (project) => {\r\n        projects.push(project);\r\n        addNewProjectToFirestore(project);\r\n        return project;\r\n    }\r\n\r\n    const addProjectAtIndex = (index, project) => {\r\n        projects.splice(index, 0, project);\r\n    }\r\n\r\n    const deleteProjectByIndex = (index) => {\r\n        const removedProject = projects[index];\r\n        projects.splice(index, 1);\r\n        return removedProject;\r\n    }\r\n    const deleteProjectbyID = (id) => {\r\n        return projects.filter(project => id !== project.id);\r\n    }\r\n    const getProjects = () => {\r\n        return projects;\r\n    }\r\n    const setProjects = (newProjects) => {\r\n        projects = newProjects;\r\n    }\r\n\r\n    const findProjectByID = (id) => {\r\n        return projects.find(task => id === task.id);\r\n    }\r\n    const findProjectByName = (name) => {\r\n        return projects.find(project => name === project.name);\r\n    }\r\n\r\n    return {\r\n        addProject,\r\n        addProjectAtIndex,\r\n        deleteProjectByIndex,\r\n        deleteProjectbyID,\r\n        findProjectByID,\r\n        getProjects,\r\n        findProjectByName,\r\n        setProjects\r\n    }\r\n})();\r\nexport default projectManager;","import React, { useState } from \"react\";\r\nimport projectFactory from \"../project-logic/project\";\r\n\r\nfunction AddNewProjectOverlay(props) {\r\n    const {handleAddNewProject, handleExit} = props;\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    const [value, setValue] = useState(null);\r\n\r\n    const handleTextChange = (text) => {\r\n        setValue(text);\r\n        if (text !== '') {\r\n            setIsActive(true);\r\n        } else {\r\n            setIsActive(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"overlay\">\r\n            <div class='add-project-window'>\r\n                <h2>Add Project Task</h2>\r\n                <div className=\"add-project-field\">\r\n                    <input type=\"text\" id=\"project-name\"\r\n                    onChange={(e) => handleTextChange(e.target.value)} />\r\n                    <label htmlFor=\"project-name\" className={ isActive ? \"Active\" : \"\"}>Project Name</label>\r\n                </div>\r\n                <div style={{display: 'flex', justifyContent: 'space-around'}}>\r\n                    <button className='add-project-option-button'\r\n                    onClick={()=>{\r\n                        let project = projectFactory(value)\r\n                        handleAddNewProject(project);\r\n                        handleExit();\r\n                    }}>Add</button>\r\n                    <button className='add-project-option-button'\r\n                    onClick={handleExit}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddNewProjectOverlay;","import React, { useEffect, useState } from 'react';\r\nimport '../master.css';\r\nimport ProjectItem from './ProjectItem';\r\nimport projectManager from '../project-logic/projectmanager';\r\nimport projectFactory from '../project-logic/project';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport AddNewProjectOverlay from './AddNewProjectOverlay';\r\n\r\nfunction NavigationMenu(props) {\r\n    const pM = projectManager;\r\n    const { handleChangeProject } = props;\r\n    const [ projects, setProjects ] = useState(projectManager.getProjects());\r\n    const [ addProjectWindowVisible, setAddProjectWindowVisible ] = useState(false);\r\n\r\n    const makeAddProjectWindowVisible = () => {\r\n        setAddProjectWindowVisible(true);\r\n    }\r\n\r\n    const addNewProject = (project) => {\r\n        let newProjects = projects.map(project => Object.assign({}, project));\r\n        newProjects.push(project);\r\n        projectManager.addProject(project);\r\n        setProjects(newProjects);\r\n    }\r\n\r\n    const toggleAddProjectWindowVisible = () => {\r\n        setAddProjectWindowVisible(!addProjectWindowVisible);\r\n    }\r\n    useEffect(()=>{\r\n        projectManager.setProjects(projects);\r\n    });\r\n\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"main-buttons-container\">\r\n                {\r\n                projectManager.getProjects()[0] && <ProjectItem handleChangeProject={handleChangeProject} \r\n                project={projectManager.getProjects()[0]}></ProjectItem>\r\n                }\r\n                <button className=\"main-button\">Today</button>\r\n                \r\n            </div>\r\n            <h2>Projects</h2>\r\n            <div className=\"project-menu\">\r\n                {\r\n                    projects.map(project=>\r\n                        project.getID() !== '~' &&\r\n                        <ProjectItem \r\n                        handleChangeProject={handleChangeProject}\r\n                        project={project}></ProjectItem>\r\n                    )\r\n                }\r\n                <button onClick={makeAddProjectWindowVisible} className=\"add-project-button\">Add New Project</button>\r\n                <CSSTransition in={addProjectWindowVisible} timeout={300} classNames=\"fadeIn\" unmountOnExit>\r\n                    <AddNewProjectOverlay\r\n                    handleAddNewProject = {addNewProject.bind(this)}\r\n                    handleExit = {toggleAddProjectWindowVisible.bind(this)}>\r\n                    </AddNewProjectOverlay>\r\n                </CSSTransition>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavigationMenu;","import React, { useState } from \"react\";\r\nimport taskFactory from \"../project-logic/task\";\r\n\r\nfunction AddNewTaskOverlay(props) {\r\n    const { handleAddTask, handleExit } = props;\r\n\r\n    const [isActiveList, setIsActiveList] = useState([false, false, false, false]);\r\n\r\n    const [values, setValues] = useState([null, null, null, null]);\r\n\r\n    function handleTextChange(index, text) {\r\n        let newValues = [...values];\r\n        newValues[index] = text;\r\n        setValues(newValues);\r\n\r\n        let newIsActiveList = [...isActiveList];\r\n        if (text !== '') {\r\n            newIsActiveList[index] = true;\r\n        } else {\r\n            newIsActiveList[index] = false;\r\n        }\r\n        setIsActiveList(newIsActiveList);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"add-task-window\">\r\n                <h2>Add New Task</h2>\r\n                <div className=\"add-task-field\">\r\n                    <input type=\"text\" id=\"task-name\"\r\n                    onChange={(e) => handleTextChange(0, e.target.value)} />\r\n                    <label htmlFor=\"task-name\" className={ isActiveList[0] ? \"Active\" : \"\"}>Task Name</label>\r\n                </div>\r\n                <div className=\"add-task-field\">\r\n                    <input type=\"text\" id=\"task-description\"\r\n                    onChange={(e) => handleTextChange(1, e.target.value)} />\r\n                    <label htmlFor=\"task-description\" className={ isActiveList[1] ? \"Active\" : \"\"}>Description</label>\r\n                </div>\r\n                <div style={{display: 'flex'}}>\r\n                    <div className=\"add-task-field date-field\">\r\n                        <input type=\"date\" id=\"task-due-date\"\r\n                        onChange={(e) => handleTextChange(2, e.target.value)} />\r\n                        <label className='static' htmlFor=\"task-due-date\">Due Date</label>\r\n                    </div>\r\n                    <div className=\"add-task-field half-field\">\r\n                        <input type=\"number\" id=\"task-priority\" \r\n                        onChange={(e) => handleTextChange(3, e.target.value)}/>\r\n                        <label htmlFor='task-priority' className={ isActiveList[3] ? \"Active\" : \"\"}>Priority</label>\r\n                    </div>\r\n                </div>\r\n                <div style={{display: 'flex', justifyContent: 'space-around'}}>\r\n                    <button className='add-task-option-button'\r\n                    onClick={()=>{\r\n                        let newTask = taskFactory(values[0], values[1], values[2], values[3])\r\n                        handleAddTask(newTask);\r\n                        handleExit();\r\n                    }}>Add</button>\r\n                    <button className='add-task-option-button'\r\n                    onClick={props.handleExit}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default AddNewTaskOverlay;","import React, { useState } from \"react\";\r\nimport taskFactory from \"../project-logic/task\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction EditTaskOverlay(props) {\r\n    const { task, handleEditTask, handleExit } = props;\r\n\r\n    const [isActiveList, setIsActiveList] = useState([task.title, task.description, \r\n        task.dueDate, task.priority]);\r\n\r\n    const [values, setValues] = useState([task.title, task.description, \r\n        task.dueDate, task.priority]);\r\n\r\n    function handleTextChange(index, text) {\r\n        let newValues = [...values];\r\n        newValues[index] = text;\r\n        setValues(newValues);\r\n\r\n        let newIsActiveList = [...isActiveList];\r\n        if (text !== '') {\r\n            newIsActiveList[index] = true;\r\n        } else {\r\n            newIsActiveList[index] = false;\r\n        }\r\n        setIsActiveList(newIsActiveList);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"add-task-window\">\r\n                <h2>Edit Task</h2>\r\n                <div className=\"add-task-field\">\r\n                    <input type=\"text\" id=\"task-name\" value={values[0]}\r\n                    onChange={(e) => handleTextChange(0, e.target.value)} />\r\n                    <label htmlFor=\"task-name\" className={ isActiveList[0] ? \"Active\" : \"\"}>Task Name</label>\r\n                </div>\r\n                <div className=\"add-task-field\">\r\n                    <input type=\"text\" id=\"task-description\" value={values[1]}\r\n                    onChange={(e) => handleTextChange(1, e.target.value)} />\r\n                    <label htmlFor=\"task-description\" className={ isActiveList[1] ? \"Active\" : \"\"}>Description</label>\r\n                </div>\r\n                <div style={{display: 'flex'}}>\r\n                    <div className=\"add-task-field date-field\">\r\n                        <input type=\"date\" id=\"task-due-date\" value={values[2]}\r\n                        onChange={(e) => handleTextChange(2, e.target.value)} />\r\n                        <label className='static' htmlFor=\"task-due-date\">Due Date</label>\r\n                    </div>\r\n                    <div className=\"add-task-field half-field\">\r\n                        <input type=\"number\" id=\"task-priority\" value={values[3]}\r\n                        onChange={(e) => handleTextChange(3, e.target.value)}/>\r\n                        <label htmlFor='task-priority' className={ isActiveList[3] ? \"Active\" : \"\"}>Priority</label>\r\n                    </div>\r\n                </div>\r\n                <div style={{display: 'flex', justifyContent: 'space-around'}}>\r\n                    <button className='add-task-option-button'\r\n                    onClick={()=>{\r\n                        let newTask = taskFactory(values[0], values[1], values[2], values[3])\r\n                        handleEditTask(task.id, newTask);\r\n                        handleExit();\r\n                    }}>Submit Changes</button>\r\n                    <button className='add-task-option-button'\r\n                    onClick={props.handleExit}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nEditTaskOverlay.propTypes = {\r\n    task: PropTypes.object.isRequired,\r\n    handleEditTask: PropTypes.func,\r\n    handleExit: PropTypes.func\r\n}\r\nexport default EditTaskOverlay;","import React, { useEffect, useState } from 'react';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport '../master.css';\r\nimport EditTaskOverlay from './EditTaskOverlay';\r\n\r\nfunction TaskItem(props) {\r\n    const { task, handleDeleteTask, handleCompleteTask, handleEditTask } = props;\r\n\r\n    const [ showEditTaskWindow, setShowEditTaskWindow ] = useState(false);\r\n\r\n    const stopBubbling = (e) => {\r\n        setShowEditTaskWindow(false);\r\n    }\r\n\r\n    const checkBoxToTaskCompletion = (e) => {\r\n        let checked = e.target.checked;\r\n        handleCompleteTask(task.getID(), checked);\r\n    }\r\n\r\n    const toggleShowEditTaskWindow = (e) => {\r\n        if (e && e.target.type === 'checkbox') return;\r\n        setShowEditTaskWindow(!showEditTaskWindow);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='task-item' onClick={toggleShowEditTaskWindow}>\r\n                <input onClick={stopBubbling} type='checkbox' checked={task.isComplete()} className='checkbox' onChange={checkBoxToTaskCompletion}/>\r\n                <p className='task-item-label'>{task.title}</p>\r\n                <div className='task-item-right-box'>\r\n                    <p className='task-date'>{task.dueDate}</p>\r\n                    <i className='fas fa-trash-alt'\r\n                        onClick={handleDeleteTask.bind(this, task.getID())}></i>\r\n                </div>\r\n            </div>\r\n            <CSSTransition in={showEditTaskWindow} timeout={300} classNames=\"fadeIn\" unmountOnExit>\r\n                <EditTaskOverlay task={task}\r\n                    handleEditTask={handleEditTask.bind(this)}\r\n                    handleExit={toggleShowEditTaskWindow.bind(this)}></EditTaskOverlay>\r\n            </CSSTransition>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskItem;","import React, { useState } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport AddNewTaskOverlay from \"./AddNewTaskOverlay\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nfunction ProjectOverview(props) {\r\n    const { project, handleAddTask, handleDeleteTask, \r\n        handleCompleteTask, handleClearCompleted, handleEditTask } = props;\r\n    const [ addNewVisible, setAddNewVisible ] = useState(false);\r\n\r\n    const toggleAddNewVisible = () => {\r\n        setAddNewVisible(!addNewVisible);\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-preview\">\r\n            <h2 className=\"project-title\">\r\n                {project.name}\r\n            </h2>\r\n            <div className=\"task-list\">\r\n                {\r\n                    project.getTasks().map(task=>\r\n                        <TaskItem task={task} \r\n                        handleDeleteTask={handleDeleteTask.bind(this)}\r\n                        handleCompleteTask={handleCompleteTask.bind(this)}\r\n                        handleEditTask={handleEditTask.bind(this)}></TaskItem>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"preview-button-options\">\r\n                <button onClick={toggleAddNewVisible} \r\n                className=\"task-button add-task-button\">Add New Task</button>\r\n                <button onClick={handleClearCompleted} className=\"task-button clear-selected\">Clear Selected</button>\r\n            </div>\r\n            <CSSTransition in={addNewVisible} timeout={300} classNames=\"fadeIn\" unmountOnExit>\r\n                <AddNewTaskOverlay handleAddTask={handleAddTask.bind(this)} \r\n                handleExit={toggleAddNewVisible.bind(this)}></AddNewTaskOverlay>\r\n            </CSSTransition>\r\n        </div>\r\n    );\r\n}\r\nexport default ProjectOverview;","import React, { useState, useEffect } from 'react';\r\nimport NavigationMenu from './NavigationMenu';\r\nimport './main.css'\r\nimport ProjectOverview from './ProjectOverview';\r\nimport projectManager from '../project-logic/projectmanager';\r\n\r\nfunction Main() {\r\n    const [selectedProject, setSelectedProject] = \r\n            useState(projectManager.getProjects()[0]);\r\n    \r\n    const addTaskToCurrentProject = (task) => {\r\n        let newSelectedProject = Object.assign({}, selectedProject);\r\n        newSelectedProject.addTask(task);\r\n        setSelectedProject(newSelectedProject);\r\n    }\r\n\r\n    const deleteTaskFromCurrentProject = (id) => {\r\n        let newSelectedProject = Object.assign({}, selectedProject);\r\n        newSelectedProject.removeTaskByID(id);\r\n        setSelectedProject(newSelectedProject);\r\n    }\r\n\r\n    const toggleCompleteTaskFromCurrentProject = (id, complete) => {\r\n        let newSelectedProject = Object.assign({}, selectedProject);\r\n        newSelectedProject.toggleCompleteTaskByID(id, complete);\r\n        setSelectedProject(newSelectedProject);\r\n    }\r\n\r\n    const clearCompletedFromCurrentProject = () => {\r\n        let newSelectedProject = Object.assign({}, selectedProject);\r\n        newSelectedProject.clearCompletedTasks();\r\n        setSelectedProject(newSelectedProject);\r\n    }\r\n    useEffect(()=>{\r\n        let id = selectedProject.getID();\r\n        let project = projectManager.findProjectByID(id);\r\n        if (project)\r\n            project.setTasks(selectedProject.getTasks());\r\n    });\r\n    const changeSelectedProject = (newProject) => {\r\n        setSelectedProject(newProject);\r\n    }\r\n\r\n    const editTaskInCurrentProject = (id, newTask) => {\r\n        let newSelectedProject = Object.assign({}, selectedProject);\r\n        newSelectedProject.editTaskWithNewTaskInfo(id, newTask);\r\n        setSelectedProject(newSelectedProject);\r\n    }\r\n\r\n\r\n    return (\r\n        <main>\r\n            <NavigationMenu\r\n            handleChangeProject={changeSelectedProject.bind(this)}></NavigationMenu>\r\n            <ProjectOverview project={selectedProject} \r\n            handleAddTask={addTaskToCurrentProject.bind(this)}\r\n            handleDeleteTask={deleteTaskFromCurrentProject.bind(this)}\r\n            handleCompleteTask={toggleCompleteTaskFromCurrentProject.bind(this)}\r\n            handleEditTask={editTaskInCurrentProject.bind(this)}\r\n            handleClearCompleted={clearCompletedFromCurrentProject.bind(this)\r\n            }></ProjectOverview>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;","import Header from './components/Header';\r\nimport Main from './components/Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header></Header>\r\n      <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const config = {\r\n    apiKey: \"AIzaSyBVkAae2NvBnLd1sN-scx1yqa3hK0fknbw\",\r\n    authDomain: \"projectmanager-45a0f.firebaseapp.com\",\r\n    projectId: \"projectmanager-45a0f\",\r\n    storageBucket: \"projectmanager-45a0f.appspot.com\",\r\n    messagingSenderId: \"711181533996\",\r\n    appId: \"1:711181533996:web:41005591631a8ee1886289\",\r\n    measurementId: \"G-Q8RDGQJZ8Q\"\r\n};\r\n  \r\nexport function getFirebaseConfig() {\r\n    if (!config || !config.apiKey) {\r\n      throw new Error('No Firebase configuration object provided.' + '\\n' +\r\n      'Add your web app\\'s configuration object to firebase-config.js');\r\n    } else {\r\n      return config;\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { getFirebaseConfig } from './backend/firebase-config';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { matchProjectManagerToFirestore } from './backend/firestore';\r\nimport projectManager from './project-logic/projectmanager';\r\n\r\ninitializeApp(getFirebaseConfig());\r\nmatchProjectManagerToFirestore().then(()=>{\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n});\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}